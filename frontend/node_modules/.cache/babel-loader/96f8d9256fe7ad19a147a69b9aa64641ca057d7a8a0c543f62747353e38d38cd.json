{"ast":null,"code":"const API_BASE_URL = 'http://localhost:9090';\nexport const fetchTodos = async (params = '') => {\n  const response = await fetch(`${API_BASE_URL}/todos?${params}`);\n  return response.json();\n};\nexport const createTodo = async todo => {\n  const response = await fetch(`${API_BASE_URL}/todos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(todo)\n  });\n  return response.json();\n};\nexport const updateTodo = async todo => {\n  const {\n    id,\n    ...body\n  } = todo;\n  const response = await fetch(`${API_BASE_URL}/todos/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n  return response.json();\n};\nexport const markAsDoneTodo = async todo => {\n  const response = await fetch(`${API_BASE_URL}/todos/${todo.id}/done`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(todo)\n  });\n  return response.json();\n};\nexport const markAsUnDoneTodo = async todo => {\n  const response = await fetch(`${API_BASE_URL}/todos/${todo.id}/undone`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(todo)\n  });\n  return response.json();\n};\nexport async function fetchMetrics() {\n  const response = await fetch(`${API_BASE_URL}/todos/metrics`);\n  if (!response.ok) throw new Error(\"Error fetching metrics\");\n  return response.json();\n}\nexport const deleteTodo = async id => {\n  const response = await fetch(`${API_BASE_URL}/todos/${id}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Error deleting ToDo');\n  }\n};","map":{"version":3,"names":["API_BASE_URL","fetchTodos","params","response","fetch","json","createTodo","todo","method","headers","body","JSON","stringify","updateTodo","id","markAsDoneTodo","markAsUnDoneTodo","fetchMetrics","ok","Error","deleteTodo"],"sources":["/Users/alejandro.escobedo/Documents/todo-listnpx/frontend/src/api/ToDoApi.ts"],"sourcesContent":["const API_BASE_URL = 'http://localhost:9090';\n\nexport const fetchTodos = async (params = '') => {\n  const response = await fetch(`${API_BASE_URL}/todos?${params}`);\n  return response.json();\n};\n\nexport const createTodo = async (todo: any) => {\n  const response = await fetch(`${API_BASE_URL}/todos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(todo),\n  });\n  return response.json();\n};\n\nexport const updateTodo = async (todo: any) => {\n    const { id, ...body } = todo;\n    const response = await fetch(`${API_BASE_URL}/todos/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body),\n    });\n    return response.json();\n};\n  \n\nexport const markAsDoneTodo = async (todo: any) => {\n    const response = await fetch(`${API_BASE_URL}/todos/${todo.id}/done`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(todo),\n    });\n    return response.json();\n};\n\nexport const markAsUnDoneTodo = async (todo: any) => {\n    const response = await fetch(`${API_BASE_URL}/todos/${todo.id}/undone`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(todo),\n    });\n    return response.json();\n};\n\nexport async function fetchMetrics() {\n    const response = await fetch(`${API_BASE_URL}/todos/metrics`);\n    if (!response.ok) throw new Error(\"Error fetching metrics\");\n    return response.json();\n}\n  \nexport const deleteTodo = async (id: number): Promise<void> => {\n  const response = await fetch(`${API_BASE_URL}/todos/${id}`, {\n    method: 'DELETE',\n  });\n\n  if (!response.ok) {\n    throw new Error('Error deleting ToDo');\n  }\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,MAAM,GAAG,EAAE,KAAK;EAC/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,UAAUE,MAAM,EAAE,CAAC;EAC/D,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAOC,IAAS,IAAK;EAC7C,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,QAAQ,EAAE;IACpDQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;EAC3B,CAAC,CAAC;EACF,OAAOJ,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMQ,UAAU,GAAG,MAAON,IAAS,IAAK;EAC3C,MAAM;IAAEO,EAAE;IAAE,GAAGJ;EAAK,CAAC,GAAGH,IAAI;EAC5B,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,UAAUc,EAAE,EAAE,EAAE;IAC1DN,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACF,IAAI;EAC3B,CAAC,CAAC;EACF,OAAOP,QAAQ,CAACE,IAAI,CAAC,CAAC;AAC1B,CAAC;AAGD,OAAO,MAAMU,cAAc,GAAG,MAAOR,IAAS,IAAK;EAC/C,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,UAAUO,IAAI,CAACO,EAAE,OAAO,EAAE;IACpEN,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;EAC3B,CAAC,CAAC;EACF,OAAOJ,QAAQ,CAACE,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMW,gBAAgB,GAAG,MAAOT,IAAS,IAAK;EACjD,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,UAAUO,IAAI,CAACO,EAAE,SAAS,EAAE;IACtEN,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;EAC3B,CAAC,CAAC;EACF,OAAOJ,QAAQ,CAACE,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,eAAeY,YAAYA,CAAA,EAAG;EACjC,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,gBAAgB,CAAC;EAC7D,IAAI,CAACG,QAAQ,CAACe,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3D,OAAOhB,QAAQ,CAACE,IAAI,CAAC,CAAC;AAC1B;AAEA,OAAO,MAAMe,UAAU,GAAG,MAAON,EAAU,IAAoB;EAC7D,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,UAAUc,EAAE,EAAE,EAAE;IAC1DN,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,IAAI,CAACL,QAAQ,CAACe,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;EACxC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}